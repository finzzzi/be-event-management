// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Customer
  EventOrganizer
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  email           String         @unique
  password        String
  role            Role           @default(Customer)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  organizedEvents Event[]
  referralCode    ReferralCode?
  referrals       UserReferral[] @relation("ReferredUser")
  referredBy      UserReferral[] @relation("ReferringUser")
  points          Point[]
  coupon          Coupon?
  transactions    Transaction[]

  @@map("users")
}

model ReferralCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("referral_codes")
}

model UserReferral {
  id         Int      @id @default(autoincrement())
  // User yang direferensikan
  userId     Int
  // User yang mereferensikan
  referralId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("ReferredUser", fields: [userId], references: [id])
  referrer   User     @relation("ReferringUser", fields: [referralId], references: [id])

  @@map("user_referrals")
}

model Point {
  id                     Int          @id @default(autoincrement())
  userId                 Int
  point                  Int
  expiredAt              DateTime?
  deletedAt              DateTime?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  user                   User         @relation(fields: [userId], references: [id])
  originalPointExpiredAt DateTime?
  transactionId          Int?
  transaction            Transaction? @relation("PointsUsedInTransaction", fields: [transactionId], references: [id])
  originalPointId        Int?

  @@map("points")
}

model Coupon {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  nominal   Int
  expiredAt DateTime
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@map("coupons")
}

model Voucher {
  id        Int       @id @default(autoincrement())
  name      String
  eventId   Int       @unique
  nominal   Int
  quota     Int
  startDate DateTime
  endDate   DateTime
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  event     Event     @relation(fields: [eventId], references: [id])

  @@map("vouchers")
}

model Event {
  id           Int           @id @default(autoincrement())
  userId       Int
  name         String
  categoryId   Int
  price        Int
  quota        Int
  startDate    DateTime
  endDate      DateTime
  location     String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  organizer    User          @relation(fields: [userId], references: [id])
  category     Category      @relation(fields: [categoryId], references: [id])
  vouchers     Voucher?
  transactions Transaction[]

  @@map("events")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event[]

  @@map("categories")
}

model Transaction {
  id                  Int               @id @default(autoincrement())
  userId              Int
  eventId             Int
  transactionStatusId Int               @default(1)
  quantity            Int
  totalDiscount       Int
  totalPrice          Int
  paymentProof        String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [userId], references: [id])
  event               Event             @relation(fields: [eventId], references: [id])
  transactionStatus   TransactionStatus @relation(fields: [transactionStatusId], references: [id])
  pointUsageRecords   Point[]           @relation("PointsUsedInTransaction")

  @@map("transactions")
}

model TransactionStatus {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("transaction_status")
}
